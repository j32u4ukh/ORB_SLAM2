# 編譯期
cmake .. -DCMAKE_BUILD_TYPE=Release
make -j4

# 執行期
$ /home/j32u4ukh/Documents/ORB_SLAM2> 


./Examples/Monocular/mono_kitti Vocabulary/ORBvoc.txt Examples/Monocular/KITTI00-02.yaml "/media/j32u4ukh/TOSHIBA EXT/SLAM/data_odometry_gray/dataset/sequences/00"
./Examples/Monocular/mono_kitti Vocabulary/ORBvoc.txt Examples/Monocular/KITTI00-02.yaml "/media/j32u4ukh/TOSHIBA EXT/SLAM/data_odometry_gray/dataset/sequences/01"
./Examples/Monocular/mono_kitti Vocabulary/ORBvoc.txt Examples/Monocular/KITTI00-02.yaml "/media/j32u4ukh/TOSHIBA EXT/SLAM/data_odometry_gray/dataset/sequences/02"
./Examples/Monocular/mono_kitti Vocabulary/ORBvoc.txt Examples/Monocular/KITTI03.yaml "/media/j32u4ukh/TOSHIBA EXT/SLAM/data_odometry_gray/dataset/sequences/03"
./Examples/Monocular/mono_kitti Vocabulary/ORBvoc.txt Examples/Monocular/KITTI04-12.yaml "/media/j32u4ukh/TOSHIBA EXT/SLAM/data_odometry_gray/dataset/sequences/04"
./Examples/Monocular/mono_kitti Vocabulary/ORBvoc.txt Examples/Monocular/KITTI04-12.yaml "/media/j32u4ukh/TOSHIBA EXT/SLAM/data_odometry_gray/dataset/sequences/12"


$ /home/j32u4ukh/Documents/ORB_SLAM2/build> 

[origin]

../Examples/Monocular/mono_kitti ../Vocabulary/ORBvoc.txt ../Examples/Monocular/KITTI00-02.yaml "/media/j32u4ukh/TOSHIBA EXT/SLAM/data_odometry_gray/dataset/sequences/00"

[boost::serialization]

../Examples/Monocular/mono_kitti ../Vocabulary/ORBvoc.txt ../Examples/Monocular/KITTI00-02.yaml "/media/j32u4ukh/TOSHIBA EXT/SLAM/data_odometry_gray/dataset/sequences/00" 1

# 執行時間
[develop - foreach 改版前]
詞袋數據讀取 00:09.80
median tracking time: 0.0596703
mean tracking time: 0.0700843
建圖 10:53.73

[foreach 改版後]
median tracking time: 0.0712685
mean tracking time: 0.0836848
建圖 10:16.31


[函式封裝](有 1 ～ 2 處的丟失追蹤)
New Map created with 508 points
Vocabulary loaded! Cost 9.44923 s.
#KeyFrame: 639
#MapPoint: 63019
Total time: 9:6.69826
Median tracking time: 0.0664803
Mean tracking time: 0.0710441

[Octomap]
Depth ～ N(13.7239, 9.01453)
單純建圖，記憶體耗費 2.5 G

>> 2 處丟失
建構 Octomap，記憶體耗費 2.2 G，產出檔案 19.2 MB
建構 Octomap 花費：518.471 秒
saving octomap ... 
Writing 35169937 nodes to output stream... done.
Octomap 數據寫出花費：7.72189 秒


「在未發生丟失的情況下的最佳表現」(當時印出了許多資訊，或許是因此拖慢了執行續的進展，剛好執行到等待的部份，而沒有發生丟失？？？？？)
#KeyFrame: 794
#MapPoint: 72721
Total time: 8:47.1532
Median tracking time: 0.0660525
Mean tracking time: 0.0705246

[首次導入地圖序列化]
Saving Mapfile: map.bin ...done
#KeyFrame: 555
#MapPoint: 52851
Total time: 9:40.6591
Median tracking time: 0.0698072
Mean tracking time: 0.0731046



>>> 階段 1 (   0, 1650) 
Loop detected! index: 1587

TrackWithMotionModel failed.
[addPoseOptimizationEdges] Before optimize #vertices: 1, #edges: 202, n_mp: 202, n_outlier: 0
<<<
[addPoseOptimizationMonoEdges] idx: 1590, n_outlier: 0, n_outlier_increment: 202, n_edge0: 0, n_edge1: 202
virtual int g2o::SparseOptimizer::optimize(int, bool): 0 vertices to optimize, maybe forgot to call initializeOptimization()
[addPoseOptimizationMonoEdges] idx: 1590, n_outlier: 202, n_outlier_increment: 202, n_edge0: 0, n_edge1: 202
virtual int g2o::SparseOptimizer::optimize(int, bool): 0 vertices to optimize, maybe forgot to call initializeOptimization()
[addPoseOptimizationMonoEdges] idx: 1590, n_outlier: 202, n_outlier_increment: 202, n_edge0: 0, n_edge1: 202
virtual int g2o::SparseOptimizer::optimize(int, bool): 0 vertices to optimize, maybe forgot to call initializeOptimization()
[addPoseOptimizationMonoEdges] idx: 1590, n_outlier: 202, n_outlier_increment: 202, n_edge0: 0, n_edge1: 202
[addPoseOptimizationEdges] After optimize #vertices: 1, #edges: 202, n_mp: 202, n_outlier: 202
[TrackReferenceKeyFrame] nmatchesMap: 0, n_mp: 202, mCurrentFrame.N: 3105, n_outlier: 202, n_zero_observed: 0
第 2-2 類丟失，TrackReferenceKeyFrame
第 2 類丟失，Failed before update.
!!!!!!!!!! Tracking lost !!!!!!!!!!



#KeyFrame: 322
#MapPoint: 34071
Total time: 3:18.8563
Median tracking time: 0.064987
Mean tracking time: 0.0692198


>>> 階段 2 (1650, 2300)


>>> 階段 3 (2300, 3400)
#KeyFrame: 244
#MapPoint: 28643
Total time: 2:39.8066
Median tracking time: 0.0633098
Mean tracking time: 0.0653234




>>> 階段 4 (3400, 3600)


>>> 階段 5 (3600, 5000)

>>>>>>> sparse_optimizer

(0.85956, -0.192071, 0.542614)



virtual int g2o::SparseOptimizer::optimize(int, bool): 0 vertices to optimize, maybe forgot to call initializeOptimization()
沒有頂點的可能原因：
* 都被標注為 isBad 導致沒有被加入
* 數據沒有被確實加到陣列中



DBoW2::FeatureVector kf_feature_vector = vFeatVecKF;
DBoW2::FeatureVector f_feature_vector = F.mFeatVec;

if(kf_feature_vector.first < )

for (auto feature_vector : boost::combine(kf_feature_vector, f_feature_vector)) {

    // FeatureVector == std::map<NodeId, std::vector<unsigned int> >
    pair<DBoW2::NodeId, std::vector<unsigned int>> kf_feature;
    pair<DBoW2::NodeId, std::vector<unsigned int>> f_feature;

    boost::tie(kf_feature, f_feature) = feature_vector;
    DBoW2::NodeId kf_node_id = kf_feature.first;
    DBoW2::NodeId f_node_id = f_feature.first;

    // kf_feature 起始節點較 f_feature 小
    if(kf_node_id < f_node_id){

        // 將 kf_feature 起始節點設為第 f_node_id 個節點
        kf_feature = vFeatVecKF.lower_bound(f_node_id);
    }
    
    // kf_feature 起始節點較 f_feature 大
    else if(kf_node_id > f_node_id){

        // 將 f_feature 起始節點設為第 kf_node_id 個節點
        f_feature = F.mFeatVec.lower_bound(kf_node_id);
    }   
}



